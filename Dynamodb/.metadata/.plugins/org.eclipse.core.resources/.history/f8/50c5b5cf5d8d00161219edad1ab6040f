import java.util.ArrayList;
import java.util.Iterator;

import com.amazonaws.AmazonClientException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.profile.ProfileCredentialsProvider;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Index;
import com.amazonaws.services.dynamodbv2.document.Item;
import com.amazonaws.services.dynamodbv2.document.ItemCollection;
import com.amazonaws.services.dynamodbv2.document.QueryOutcome;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.dynamodbv2.document.spec.QuerySpec;
import com.amazonaws.services.dynamodbv2.document.utils.NameMap;
import com.amazonaws.services.dynamodbv2.document.utils.ValueMap;
import com.amazonaws.services.dynamodbv2.model.AttributeDefinition;
import com.amazonaws.services.dynamodbv2.model.CreateTableRequest;
import com.amazonaws.services.dynamodbv2.model.GlobalSecondaryIndex;
import com.amazonaws.services.dynamodbv2.model.GlobalSecondaryIndexDescription;
import com.amazonaws.services.dynamodbv2.model.KeySchemaElement;
import com.amazonaws.services.dynamodbv2.model.KeyType;
import com.amazonaws.services.dynamodbv2.model.Projection;
import com.amazonaws.services.dynamodbv2.model.ProjectionType;
import com.amazonaws.services.dynamodbv2.model.ProvisionedThroughput;
import com.amazonaws.services.dynamodbv2.model.TableDescription;


public class CreateTableWithGSI {

	public static void main(String[] args) {
		DynamoDB dynamoDB = getDynamoDB();
		

		// Attribute definitions
		ArrayList<AttributeDefinition> attributeDefinitions = new ArrayList<AttributeDefinition>();
	
		attributeDefinitions.add(new AttributeDefinition()
		    .withAttributeName("Location")
		    .withAttributeType("S"));
		attributeDefinitions.add(new AttributeDefinition()
		    .withAttributeName("Date")
		    .withAttributeType("S"));
		attributeDefinitions.add(new AttributeDefinition()
		    .withAttributeName("Precipitation")
		    .withAttributeType("N"));
	
		// Table key schema
		ArrayList<KeySchemaElement> tableKeySchema = new ArrayList<KeySchemaElement>();
		tableKeySchema.add(new KeySchemaElement()
		    .withAttributeName("Location")
		    .withKeyType(KeyType.HASH));  //Partition key
		tableKeySchema.add(new KeySchemaElement()
		    .withAttributeName("Date")
		    .withKeyType(KeyType.RANGE));  //Sort key
	
		// PrecipIndex
		GlobalSecondaryIndex precipIndex = new GlobalSecondaryIndex()
		    .withIndexName("PrecipIndex")
		    .withProvisionedThroughput(new ProvisionedThroughput()
		        .withReadCapacityUnits((long) 10)
		        .withWriteCapacityUnits((long) 1))
		        .withProjection(new Projection().withProjectionType(ProjectionType.ALL));
	
		ArrayList<KeySchemaElement> indexKeySchema = new ArrayList<KeySchemaElement>();
	
		indexKeySchema.add(new KeySchemaElement()
		    .withAttributeName("Date")
		    .withKeyType(KeyType.HASH));  //Partition key
		indexKeySchema.add(new KeySchemaElement()
		    .withAttributeName("Precipitation")
		    .withKeyType(KeyType.RANGE));  //Sort key
	
		precipIndex.setKeySchema(indexKeySchema);
	
		CreateTableRequest createTableRequest = new CreateTableRequest()
		    .withTableName("WeatherData")
		    .withProvisionedThroughput(new ProvisionedThroughput()
		        .withReadCapacityUnits((long) 5)
		        .withWriteCapacityUnits((long) 1))
		    .withAttributeDefinitions(attributeDefinitions)
		    .withKeySchema(tableKeySchema)
		    .withGlobalSecondaryIndexes(precipIndex);
	
		Table table = dynamoDB.createTable(createTableRequest);
		System.out.println(table.getDescription());
	}
	
	private static DynamoDB getDynamoDB(){
		/*
         * The ProfileCredentialsProvider will return your [default]
         * credential profile by reading from the credentials file located at
         * (/Users/ghemant/.aws/credentials).
         */
        AWSCredentials credentials = null;
        try {
            credentials = new ProfileCredentialsProvider("default").getCredentials();
        } catch (Exception e) {
            throw new AmazonClientException(
                    "Cannot load the credentials from the credential profiles file. " +
                    "Please make sure that your credentials file is at the correct " +
                    "location (/Users/ghemant/.aws/credentials), and is in valid format.",
                    e);
        }
        
        Region usWest2 = Region.getRegion(Regions.US_WEST_2);
		
		// This client will default to US West (Oregon)
		AmazonDynamoDBClient client = new AmazonDynamoDBClient(credentials);
		client.setRegion(usWest2);
		
		DynamoDB dynamoDB = new DynamoDB(client);
		return dynamoDB;
	}
	
	private static void describe() {
		
		DynamoDB dynamoDB = getDynamoDB();

			Table table = dynamoDB.getTable("WeatherData");
			TableDescription tableDesc = table.describe();
				

			Iterator<GlobalSecondaryIndexDescription> gsiIter = tableDesc.getGlobalSecondaryIndexes().iterator();
			while (gsiIter.hasNext()) {
			    GlobalSecondaryIndexDescription gsiDesc = gsiIter.next();
			    System.out.println("Info for index "
			         + gsiDesc.getIndexName() + ":");

			    Iterator<KeySchemaElement> kseIter = gsiDesc.getKeySchema().iterator();
			    while (kseIter.hasNext()) {
			        KeySchemaElement kse = kseIter.next();
			        System.out.printf("\t%s: %s\n", kse.getAttributeName(), kse.getKeyType());
			    }
			    Projection projection = gsiDesc.getProjection();
			    System.out.println("\tThe projection type is: "
			        + projection.getProjectionType());
			    if (projection.getProjectionType().toString().equals("INCLUDE")) {
			        System.out.println("\t\tThe non-key projected attributes are: "
			            + projection.getNonKeyAttributes());
			    }
			}
		
	}
	
	private static void query(){
		DynamoDB dynamoDB = getDynamoDB();
		Table table = dynamoDB.getTable("WeatherData");
		Index index = table.getIndex("PrecipIndex");

		QuerySpec spec = new QuerySpec()
		    .withKeyConditionExpression("#d = :v_date and Precipitation = :v_precip")
		    .withNameMap(new NameMap()
		        .with("#d", "Date"))
		    .withValueMap(new ValueMap()
		        .withString(":v_date","2013-08-10")
		        .withNumber(":v_precip",0));

		ItemCollection<QueryOutcome> items = index.query(spec);
		Iterator<Item> iter = items.iterator(); 
		while (iter.hasNext()) {
		    System.out.println(iter.next().toJSONPretty());
		}
	}

}
